@page "/profile"

@using MODEL
@using DAL
@using User_interface.Data
@inject AuthenticationStateService Auth
@inject NavigationManager NavigationManager

<PageTitle>User Profile</PageTitle>

<div class="container">
    <div class="profile-container">
        <div class="profile-image">
            <img src="/images/me.jpg" alt="Owner's Picture" class="owner-image">
        </div>

        <!-- Profile Image and Details -->
        <div class="profile-details">
            <!-- User Image -->
            
            <!-- Profile Details -->
            @if (EditMode)
            {
                <!-- Edit Mode Form -->
                <form>
                    <div>
                        <label>Name:</label>
                        <input @bind="User.Name" />
                    </div>
                    <div>
                        <label>Phone Number:</label>
                        <input @bind="User.Phone" />
                    </div>
                    <div>
                        <label>Address:</label>
                        <input @bind="User.Address" />
                    </div>
                    <div class="form-buttons">
                        <button @onclick="SaveChanges">Save Changes</button>
                        <button @onclick="CancelEdit">Cancel</button>
                    </div>
                </form>
            }
            else
            {
                <!-- Display Mode -->
                <div class="profile-section">
                    <p><strong>Email:</strong> @User.Email</p>
                    <p><strong>Name:</strong> @User.Name</p>
                    <p><strong>Phone Number:</strong> @User.Phone</p>
                    <p><strong>Address:</strong> @User.Address</p>
                    <button @onclick="EditProfile">Edit Profile</button>
                </div>
                
            }
        </div>
    </div>
</div>


<div class="trade-history">
    <h3>Trade History</h3>
    @if (TradeHistoryDetails != null && TradeHistoryDetails.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Buyer Name</th>
                    <th>Seller Name</th>
                    <th>Animal</th>
                    <th>Animal Breed</th>
                    <th>Price</th>

                    <!-- Include other table headers for trade history details -->
                </tr>
            </thead>
            <tbody>
                @foreach (var historyDetails in TradeHistoryDetails)
                {
                    <tr>
                        <td>@historyDetails.BuyerName</td>
                        <td>@historyDetails.SellerName</td>
                        <td>@historyDetails.Animal</td>
                        <td>@historyDetails.AnimalBreed</td>
                        <td>@historyDetails.Price</td>

                        <!-- Include other trade history details as table cells -->
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No trade history available for this user.</p>
    }
</div>

<style>
  
body {
    margin: 0;
    font-family: Arial, sans-serif;
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    min-height: 100vh;
    padding: 20px;
}

/* Profile container styles */
.profile-container {
    display: flex;
    align-items: flex-start;
    max-width: 800px;
    margin-top: -150px;
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Profile image and details styles */
.profile-details {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    flex: 1;
}

.profile-image {
    margin-bottom: 20px;
}

.owner-image {
    border-radius: 50%;
    max-width: 200px;
    height: auto;
}

.profile-section {
    text-align: left;
    padding:48px;
}

.profile-section p {
    margin-bottom: 8px;
    font-size: 16px;
}

.profile-section button {
    padding: 10px 20px;
    border-radius: 3px;
    border: none;
    background-color: #007bff;
    color: white;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.profile-section button:hover {
    background-color: #0056b3;
}

/* Trade history styles */
.trade-history {
    max-width: 800px;
    margin-top: -150px;
    margin-left:250px;
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.trade-history h3 {
    margin-bottom: 15px;
    font-size: 20px;
}

/* Form styles */
form {
    display: flex;
    flex-direction: column;
    align-items: center;
}

label {
    font-weight: bold;
    margin-bottom: 5px;
}

input {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 3px;
    border: 1px solid #ccc;
}

.form-buttons {
    display: flex;
    justify-content: space-between;
    width: 100%;
}


 
        .profile-container {
            flex-direction: row;
            align-items: center;
            width:1500px;
            height:360px;
        }

        .profile-image {
            margin-bottom: 10px;
        }

        .owner-image {
            max-width: 300px;
        }

        .profile-details {
            width: 100%;
        }
    
</style>

 
@code {
    private User_model User { get; set; } = new User_model();
    private bool EditMode { get; set; } = false;
    private DAL.user_dal UserDALInstance { get; set; } = new DAL.user_dal();
    private List<TradeHistoryDetails> TradeHistoryDetails { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var currentUserId = Auth.UserId;

        // Retrieve user information using the instance of user_dal
        User = UserDALInstance.GetUserById(currentUserId);

        // Get trade history details using the provided user ID
        TradeHistoryDetails = await new TradeHistoryDAL().GetTradeHistoryDetails(currentUserId);
        Console.WriteLine($"Trade history records count: {TradeHistoryDetails?.Count}");

    
    }

    private void EditProfile()
    {
        EditMode = true;
    }

    private void CancelEdit()
    {
        EditMode = false;
    }

    private void SaveChanges()
    {
        // Save changes using the instance of user_dal
        UserDALInstance.EditUserInfoById(User.User_id, User.Name, User.Phone.ToString(), User.Address);
        EditMode = false;
    }
}