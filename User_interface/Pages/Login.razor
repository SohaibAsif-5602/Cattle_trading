@page "/login"
@using MODEL
@inject AuthenticationStateService AuthStateService
@inject NavigationManager NavigationManager
@using DAL;

<style>
    {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: Arial, sans-serif;
        background-image: url('/images/b1.jpg');
        /* Set background properties */
        background-size: cover; /* Fit the image inside the container */
        background-repeat: no-repeat; /* Prevent image repetition */
        background-position: center; /* Center the background */
        
        height: 100vh; /* Ensure full viewport height */
       
        justify-content: center;
        align-items: center;
        
    }
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: Arial, sans-serif;
    }

    /* Updated CSS styles */
    .login-text {
        color: #212121; /* Dark gray text color */
        font-size: 24px;
        margin-bottom: 20px;
    }

    .register-link {
        color: #212121; /* Dark gray text color */
        font-size: 14px;
        margin-top: 10px;
        text-decoration: none;
        display: inline-block;
    }

    .register-link:hover {
        color: #C62828; /* Red color on hover */
    }

    /* CSS styles for the form */
    .form-container {
        width: 300px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #9E9E9E; /* Light gray border */
        border-radius: 5px;
        background-color: #FAFAFA; /* Light background */
        text-align: center;
        color: #212121; /* Dark gray text color */
    }

    .form-container label {
        display: block;
        margin-bottom: 5px;
    }

    .form-container input {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border-radius: 3px;
        border: 1px solid #9E9E9E; /* Light gray border */
        box-sizing: border-box;
    }

    .form-container button {
        padding: 8px 20px;
        border: none;
        border-radius: 3px;
        background-color: #C62828; /* Red button */
        color: #FAFAFA; /* White text color */
        cursor: pointer;
    }

    .form-container button:hover {
        background-color: #9E9E9E; /* Darker red on hover */
    }

    /* Error message styles */
    .error-message {
        color: #C62828; /* Red error message */
        font-size: 14px;
        margin-top: 5px;
    }
</style>

<form class="form-container" @onsubmit="LoginUser">
    <div class="login-text">
        Login
    </div>
    <div>
        <label for="email">Email:</label>
        <input type="email" id="email" @bind="user.Email" required />
    </div>
    <div>
        <label for="password">Password:</label>
        <input type="password" id="password" @bind="user.Password" required />
    </div>
    <div>
        <button type="submit">Login</button>
    </div>
    @if (loginError)
    {
        <div class="error-message">Invalid email or password.</div>
    }

    <!-- Register link -->
    <p>Don't have an account? <a href="/register" class="register-link">Register now</a></p>

</form>

@code {
    private bool loginError = false;
    private User_model user { get; set; } = new User_model();
    private DAL.user_dal userDal = new DAL.user_dal();

    private async Task LoginUser()
    {
        loginError = false;

        // Authenticate user
        var (isValidUser, userId) = await IsValidUser(user.Email, user.Password);
        if (isValidUser)
        {
            AuthStateService.SetAuthenticationState(true, userId);

            // Redirect to dashboard or another page upon successful login
            NavigationManager.NavigateTo($"/");
        }
        else
        {
            // Display error message for invalid login
            loginError = true;
        }
    }

    private async Task<(bool, int)> IsValidUser(string email, string password)
    {
        // Authenticate user against the database
        // Implement your logic to check if the credentials are valid
        // For demo purposes, assume authentication based on email and password match
        return await userDal.ValidateUser(email, password);
    }
}

