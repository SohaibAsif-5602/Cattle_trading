@page "/sell"
@using MODEL
@using DAL
@inject cattle_dal CattleDAL
@inject NavigationManager NavigationManager
@inject AuthenticationStateService AuthStateService

<button @onclick="AddNewCattle" class="add-cattle-button">Add Cattle</button>

@if (cattleList != null && cattleList.Any())
{
    <div class="cattle-container">
        @foreach (var cattle in cattleList.Where(c => c.UserId == AuthStateService.UserId))
        {
            <div class="cattle-tab">
                <div class="cattle-info">
                    <p class="animal-info"><strong>Animal :</strong> @cattle.Animal</p>
                    <p class="animal-info"><strong>Animal Breed:</strong> @cattle.AnimalBreed</p>
                    <p class="animal-info"><strong>Age:</strong> @cattle.Age</p>
                    <p class="animal-info"><strong>Weight:</strong> @cattle.Weight</p>
                    <p class="animal-info"><strong>Price:</strong> @cattle.Price</p>
                </div>
                <img class="cattle-image" src="/images/goat.jpg" alt="Right Image">
                <div class="cattle-actions">
                    <button @onclick="() => CancelCattle(cattle.CattleId)">Cancel</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No cattle available.</p>
}


<style>
    body {
        background-color: #000000;
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .cattle-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-gap: 20px;
        padding: 20px;
    }

    .cattle-tab {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        grid-gap: 10px;
        align-items: center;
        padding: 20px;
        margin-bottom: 20px;
        border: 2px solid #ddd;
        border-radius: 10px;
        background-color: #FFFFFF;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .cattle-info {
        grid-column: span 1;
    }

    .cattle-image {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
    }

    .cattle-actions {
        display: flex;
        justify-content: flex-end;
    }

    button {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 800;
    }

    .add-cattle-button {
        background-color: #FAFAFA;
        color: #C62828;
        margin-bottom: 10px;
    }

        .add-cattle-button:hover {
            background-color: #9E9E9E;
        }

    .animal-info {
        color: #eb0000;
        font-weight: 600;
    }

    strong {
        color: #000000;
        font-weight: 800 !important;
    }
</style>

@code {
    List<Cattle_model> cattleList;

    protected override async Task OnInitializedAsync()
    {
        cattleList = await DAL.cattle_dal.GetCattle();
    }

    private async Task CancelCattle(int cattleId)
    {
        await CattleDAL.CancelCattle(cattleId);
        cattleList = await DAL.cattle_dal.GetCattle();
    }

    private void AddNewCattle()
    {
        if (NavigationManager != null)
        {
            NavigationManager.NavigateTo("/insertcattle");
        }
    }
}
