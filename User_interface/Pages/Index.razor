@page "/"
@using MODEL
@using DAL
@inject DAL.cattle_dal CattleDAL
@inject AuthenticationStateService AuthStateService
@inject NavigationManager NavigationManager
<PageTitle>Index</PageTitle>

<style>
    body {
        background-color: #000000;
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .cattle-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-gap: 20px;
        padding: 20px;
    }

    .cattle-tab {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        grid-gap: 10px;
        align-items: center;
        padding: 20px;
        margin-bottom: 20px;
        border: 2px solid #ddd;
        border-radius: 10px;
        background-color: #FFFFFF;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .cattle-info {
        grid-column: span 1;
    }

    .cattle-image {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
    }

    .cattle-actions {
        display: flex;
        justify-content: flex-end;
    }

    button {
        padding: 6px 12px;
        background-color: #FAFAFA;
        color: #eb0000;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 800;
    }

        button:hover {
            background-color: #9E9E9E;
        }

    p {
        color: #eb0000;
        font-weight: 600;
    }

    strong {
        color: #000000;
        font-weight: 800 !important;
    }
</style>

@if (!AuthStateService.IsAuthenticated)
{
    <p>You are not authenticated. Please <a href="/login">login</a>.</p>
}
else if (cattleList != null && cattleList.Any())
{
    <div class="cattle-container">
        @foreach (var cattle in cattleList)
        {
            // Only show items not uploaded by the current user
            if (cattle.UserId != AuthStateService.UserId)
            {
                <div class="cattle-tab">
                    <div class="cattle-info">
                        <p><strong>Animal :</strong> @cattle.Animal</p>
                        <p><strong>Animal Breed:</strong> @cattle.AnimalBreed</p>
                        <p><strong>Age:</strong> @cattle.Age</p>
                        <p><strong>Weight:</strong> @cattle.Weight</p>
                        <p><strong>Price:</strong> @cattle.Price</p>
                    </div>
                    <img class="cattle-image" src="/images/goat.jpg" alt="Right Image">
                    <div class="cattle-actions">
                        <button @onclick="() => BuyCattle(cattle.CattleId)">Buy</button>
                    </div>
                </div>
            }
        }
    </div>
}
else
{
    <p>No cattle available.</p>
}

@code {
    List<Cattle_model> cattleList;

    protected override async Task OnInitializedAsync()
    {
        // Check if the user is authenticated
        if (!AuthStateService.IsAuthenticated)
        {
            // Redirect to the login page if not authenticated
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            // Get the current user's ID
            var currentUserId = AuthStateService.UserId;

            // Retrieve cattle list excluding items uploaded by the current user
            cattleList = (await DAL.cattle_dal.GetCattle())
                .Where(cattle => cattle.UserId != currentUserId)
                .ToList();
        }
    }

    private async Task BuyCattle(int cattleId)
    {
        var currentUserId = AuthStateService.UserId;

        // Assuming currentUserId is the buyer and cattle.UserId is the seller
        int sellerId = cattleList.First(c => c.CattleId == cattleId).UserId;
        int buyerId = currentUserId;

        await CattleDAL.InsertTradeHistory(sellerId, buyerId, cattleId);
        // Additional logic can be added here, such as updating UI or handling success/failure
        cattleList = (await DAL.cattle_dal.GetCattle())
              .Where(cattle => cattle.UserId != currentUserId)
              .ToList();
    }
}
