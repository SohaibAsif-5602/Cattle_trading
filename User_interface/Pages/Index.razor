@page "/"
@using MODEL
@using DAL
@inject DAL.user_dal userDAL
@inject DAL.cattle_dal CattleDAL
@inject AuthenticationStateService AuthStateService
@inject NavigationManager NavigationManager

<style>
    .search-bar {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        margin-bottom: 10px;
        margin-left: 20px;
    }

    .filter-bar {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        margin-bottom: 10px;
    }

    input {
        padding: 6px;
        margin-right: 10px;
    }

    select {
        padding: 6px;
        margin-left: 10px;
    }
    body {
        background-color: #000000;
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .cattle-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-gap: 20px;
        padding: 20px;
    }

    .buy-button {
        padding: 6px 12px;
        background-color: #FAFAFA;
        color: #eb0000;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 800;
        /* Move the button to the right */
    }
    .cattle-tab {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        grid-gap: 10px;
        align-items: center;
        padding: 20px;
        margin-bottom: 20px;
        border: 2px solid #ddd;
        border-radius: 10px;
        background-color: #FFFFFF;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .cattle-info {
        grid-column: span 1;
    }

    .cattle-image {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
    }

    .cattle-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .seller-profile {
        display: flex;
        align-items: center;
        margin-top: -10px;
    }

    .seller-avatar {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .seller-info {
        display: flex;
        flex-direction: column;
    }

    button {
        padding: 6px 12px;
        background-color: #FAFAFA;
        color: #eb0000;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 800;
    }

        button:hover {
            background-color: #9E9E9E;
        }

    p {
        color: #eb0000;
        font-weight: 600;
    }

    strong {
        color: #000000;
        font-weight: 800 !important;
    }

    /* Confirmation Dialog */
    .confirmation-dialog {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: black;
        padding: 20px;
        border: 4px solid red;
        border-radius: 5px;
        z-index: 1000;
    }

    .dialog-content {
        margin-bottom: 10px;
    }

    .dialog-buttons {
        display: flex;
        justify-content: flex-end;
    }

    .confirmation-dialog button {
        margin-left: 10px;
    }

</style>


<div class="search-bar">
    <!-- Search bar -->
    <input type="text" placeholder="Search by Animal" @bind="searchTerm" />
    <button @onclick="Search">Search</button>
</div>

@if (!AuthStateService.IsAuthenticated)
{
    <p>You are not authenticated. Please <a href="/login">login</a>.</p>
}

else if (filteredCattleList != null && filteredCattleList.Any())
{
    <div class="cattle-container">
        @foreach (var cattle in filteredCattleList)
        {
            @if (cattle.UserId != AuthStateService.UserId)
            {
                <div class="cattle-tab">
                    <img class="cattle-image" src="/images/goat.jpg" alt="Right Image">

                    <div class="cattle-info">
                        <p><strong>Animal :</strong> @cattle.Animal</p>
                        <p><strong>Animal Breed:</strong> @cattle.AnimalBreed</p>
                        <p><strong>Age:</strong> @cattle.Age</p>
                        <p><strong>Weight:</strong> @cattle.Weight</p>
                        <p>
                            <strong>Price:</strong> @cattle.Price 
                            <button class="buy-button" @onclick="() => ShowBuyConfirmationModal(cattle.CattleId)">Buy</button>
                        </p>
                        
                    </div>
                    <div class="cattle-actions">
                        <!-- Display the seller's profile information -->
                        <div class="seller-profile">
                            <img class="seller-avatar" src="/images/me.jpg" alt="Seller Avatar">
                            <div class="seller-info">
                                <p> @GetSellerDisplayName(cattle.UserId)</p>
                                <!-- Add more seller information as needed -->
                            </div>
                        </div>
                        
                    </div>
                    
                </div>
            }
        }
    </div>
}
else
{
    <p>No cattle available.</p>
}

<!-- Confirmation Dialog -->
<div class="confirmation-dialog" style="display: @(buyConfirmationDialogVisible ? "block" : "none")">
    <div class="dialog-content">
        <p>@buyConfirmationDialogMessage</p>
        <div class="dialog-buttons">
            <button @onclick="ConfirmPurchase">Confirm</button>
            <button @onclick="CancelPurchase">Cancel</button>
        </div>
    </div>
</div>

@code {
    List<Cattle_model> cattleList;
    List<Cattle_model> filteredCattleList;
    bool buyConfirmationDialogVisible = false;
    string buyConfirmationDialogMessage;
    int currentCattleId; // Added to store the current cattle ID
    string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {

        if (!AuthStateService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var currentUserId = AuthStateService.UserId;
            
            cattleList = (await DAL.cattle_dal.GetCattle())
                .Where(cattle => cattle.UserId != currentUserId)
                .ToList();

            filteredCattleList = cattleList;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ShowBuyConfirmationModal(int cattleId)
    {
        buyConfirmationDialogVisible = true;
        currentCattleId = cattleId; // Set the current cattle ID
        buyConfirmationDialogMessage = "Are you sure you want to buy this cattle?";
    }

    private async Task ConfirmPurchase()
    {
        

        await BuyCattle(currentCattleId);

        cattleList = (await DAL.cattle_dal.GetCattle())
            .Where(cattle => cattle.UserId != AuthStateService.UserId)
            .ToList();

        // Update filteredCattleList after purchase
     

        // Close the confirmation dialog
        buyConfirmationDialogVisible = false;
    }

    private void CancelPurchase()
    {
        // Close the confirmation dialog
        buyConfirmationDialogVisible = false;
    }

    private async Task BuyCattle(int cattleId)
    {
        var currentUserId = AuthStateService.UserId;

        int sellerId = cattleList.First(c => c.CattleId == cattleId).UserId;

        int buyerId = currentUserId;

        await CattleDAL.InsertTradeHistory(sellerId, buyerId, cattleId);

    }

    private string GetSellerDisplayName(int userId)
    {
        var seller = userDAL.GetUserById(userId);
        return !string.IsNullOrEmpty(seller.Name) ? seller.Name : seller.Email;
    }

    private void Search()
    {
        Console.WriteLine($"Search Term: {searchTerm}");

        // Debug statement to check the count before filtering
        Console.WriteLine($"Cattle List Count: {cattleList.Count}");

        // Perform a case-insensitive search by animal name
        filteredCattleList = cattleList
     .Where(cattle => cattle.Animal.ToLower().Contains(searchTerm.ToLower()) && cattle.UserId != AuthStateService.UserId)
     .ToList();

        Console.WriteLine($"Filtered Cattle List Count: {filteredCattleList.Count}");

        InvokeAsync(StateHasChanged);

        // Debug statement to check the count after filtering
    }
}